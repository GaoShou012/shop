// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderNo.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderNo service

type OrderNoService interface {
	Gen(ctx context.Context, in *OrderNoGenRequest, opts ...client.CallOption) (*OrderNoGenResponse, error)
	Encrypt(ctx context.Context, in *OrderNoEncryptReq, opts ...client.CallOption) (*OrderNoEncryptRsp, error)
	Decrypt(ctx context.Context, in *OrderNoDecryptReq, opts ...client.CallOption) (*OrderNoDecryptRsp, error)
}

type orderNoService struct {
	c    client.Client
	name string
}

func NewOrderNoService(name string, c client.Client) OrderNoService {
	return &orderNoService{
		c:    c,
		name: name,
	}
}

func (c *orderNoService) Gen(ctx context.Context, in *OrderNoGenRequest, opts ...client.CallOption) (*OrderNoGenResponse, error) {
	req := c.c.NewRequest(c.name, "OrderNo.Gen", in)
	out := new(OrderNoGenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderNoService) Encrypt(ctx context.Context, in *OrderNoEncryptReq, opts ...client.CallOption) (*OrderNoEncryptRsp, error) {
	req := c.c.NewRequest(c.name, "OrderNo.Encrypt", in)
	out := new(OrderNoEncryptRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderNoService) Decrypt(ctx context.Context, in *OrderNoDecryptReq, opts ...client.CallOption) (*OrderNoDecryptRsp, error) {
	req := c.c.NewRequest(c.name, "OrderNo.Decrypt", in)
	out := new(OrderNoDecryptRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderNo service

type OrderNoHandler interface {
	Gen(context.Context, *OrderNoGenRequest, *OrderNoGenResponse) error
	Encrypt(context.Context, *OrderNoEncryptReq, *OrderNoEncryptRsp) error
	Decrypt(context.Context, *OrderNoDecryptReq, *OrderNoDecryptRsp) error
}

func RegisterOrderNoHandler(s server.Server, hdlr OrderNoHandler, opts ...server.HandlerOption) error {
	type orderNo interface {
		Gen(ctx context.Context, in *OrderNoGenRequest, out *OrderNoGenResponse) error
		Encrypt(ctx context.Context, in *OrderNoEncryptReq, out *OrderNoEncryptRsp) error
		Decrypt(ctx context.Context, in *OrderNoDecryptReq, out *OrderNoDecryptRsp) error
	}
	type OrderNo struct {
		orderNo
	}
	h := &orderNoHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderNo{h}, opts...))
}

type orderNoHandler struct {
	OrderNoHandler
}

func (h *orderNoHandler) Gen(ctx context.Context, in *OrderNoGenRequest, out *OrderNoGenResponse) error {
	return h.OrderNoHandler.Gen(ctx, in, out)
}

func (h *orderNoHandler) Encrypt(ctx context.Context, in *OrderNoEncryptReq, out *OrderNoEncryptRsp) error {
	return h.OrderNoHandler.Encrypt(ctx, in, out)
}

func (h *orderNoHandler) Decrypt(ctx context.Context, in *OrderNoDecryptReq, out *OrderNoDecryptRsp) error {
	return h.OrderNoHandler.Decrypt(ctx, in, out)
}
