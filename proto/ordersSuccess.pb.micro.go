// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ordersSuccess.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UsersOrdersSuccess service

type UsersOrdersSuccessService interface {
	Order(ctx context.Context, in *UsersOrdersSuccessReq, opts ...client.CallOption) (*UsersOrdersSuccessRsp, error)
}

type usersOrdersSuccessService struct {
	c    client.Client
	name string
}

func NewUsersOrdersSuccessService(name string, c client.Client) UsersOrdersSuccessService {
	return &usersOrdersSuccessService{
		c:    c,
		name: name,
	}
}

func (c *usersOrdersSuccessService) Order(ctx context.Context, in *UsersOrdersSuccessReq, opts ...client.CallOption) (*UsersOrdersSuccessRsp, error) {
	req := c.c.NewRequest(c.name, "UsersOrdersSuccess.Order", in)
	out := new(UsersOrdersSuccessRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UsersOrdersSuccess service

type UsersOrdersSuccessHandler interface {
	Order(context.Context, *UsersOrdersSuccessReq, *UsersOrdersSuccessRsp) error
}

func RegisterUsersOrdersSuccessHandler(s server.Server, hdlr UsersOrdersSuccessHandler, opts ...server.HandlerOption) error {
	type usersOrdersSuccess interface {
		Order(ctx context.Context, in *UsersOrdersSuccessReq, out *UsersOrdersSuccessRsp) error
	}
	type UsersOrdersSuccess struct {
		usersOrdersSuccess
	}
	h := &usersOrdersSuccessHandler{hdlr}
	return s.Handle(s.NewHandler(&UsersOrdersSuccess{h}, opts...))
}

type usersOrdersSuccessHandler struct {
	UsersOrdersSuccessHandler
}

func (h *usersOrdersSuccessHandler) Order(ctx context.Context, in *UsersOrdersSuccessReq, out *UsersOrdersSuccessRsp) error {
	return h.UsersOrdersSuccessHandler.Order(ctx, in, out)
}
